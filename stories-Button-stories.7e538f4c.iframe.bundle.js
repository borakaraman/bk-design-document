(self.webpackChunkbefore_storybook=self.webpackChunkbefore_storybook||[]).push([[256],{"./src/stories/Button.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,buttonBlock:()=>buttonBlock,buttonIconLoading:()=>buttonIconLoading,buttonShape:()=>buttonShape,buttonSize:()=>buttonSize,buttonStyle:()=>buttonStyle,buttonType:()=>buttonType,default:()=>Button_stories});__webpack_require__("./node_modules/@storybook/test/dist/index.mjs"),__webpack_require__("./node_modules/react/index.js");var bk_design_dist=__webpack_require__("./node_modules/bk-design/dist/index.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const Button=_ref=>{let{className,style,type,size,shape,onClick,content,block,icon,loading,...props}=_ref;return(0,jsx_runtime.jsx)(bk_design_dist.Button,{className,style,size,shape,type,onClick,block,icon,loading,...props,children:content})};Button.defaultProps={},Button.__docgenInfo={description:"",methods:[],displayName:"Button"};const Button_stories={title:"Component/Button",component:Button,parameters:{layout:"centered"},argTypes:{type:{name:"type",description:"Set button type",type:{summary:"primary | default | dashed"},defaultValue:{summary:"default"},control:"false"},size:{name:"size",description:"Set the size of button",type:{summary:"large | medium | small"},defaultValue:{summary:"medium"},control:"false"},shape:{name:"shape",description:"Can be set button shape",type:{summary:"default | circle"},defaultValue:{summary:"default"},control:"false"},icon:{name:"icon",description:"Set the icon component of button",type:{summary:'<Icon type="download" />'},defaultValue:{summary:"ReactNode"},control:"false"},loading:{name:"loading",description:"Set the loading status of button",type:{summary:"boolean"},defaultValue:{summary:"false"},control:"false"},block:{name:"block",description:"Option to fit button width to its parent width",type:{summary:"boolean"},defaultValue:{summary:"false"},control:"false"},content:{table:{disable:!0}},onClick:{table:{description:"Set the handler to handle click event",type:{summary:"(event: MouseEvent) => void"},category:"Mouse Event"}}}},buttonType={name:"Type",args:{content:["Primary Button","Default Button","Dashed Button"],type:["primary","default","dashed"]},render:args=>{const{type,content}=args;return(0,jsx_runtime.jsx)("div",{className:"buttonType",children:type.map(((e,i)=>(0,jsx_runtime.jsx)(Button,{type:e,content:content[i]})))})}},buttonSize={name:"Size",args:{content:["Small Button","Medium Button","Large Button"],size:["small","medium","large"]},render:args=>{const{size,content}=args;return(0,jsx_runtime.jsx)("div",{className:"buttonType",children:size.map(((e,i)=>(0,jsx_runtime.jsx)(Button,{size:e,content:content[i],type:"primary"})))})}},buttonShape={name:"Shape",args:{content:["B","Default Button"],shape:["circle","default"]},render:args=>{const{shape,content}=args;return(0,jsx_runtime.jsx)("div",{className:"buttonShape",children:shape.map(((e,i)=>(0,jsx_runtime.jsx)(Button,{shape:e,content:content[i],type:"primary"})))})}},buttonBlock={name:"Block",args:{content:["Primary Button Block","Default Button Block","Dashed Button Block"],type:["primary","default","dashed"],block:!0},render:args=>{const{type,content,block}=args;return(0,jsx_runtime.jsx)("div",{className:"buttonBlock",children:type.map(((e,i)=>(0,jsx_runtime.jsx)(Button,{type:e,content:content[i],block})))})}},buttonIconLoading={name:"Loading & Icon",args:{content:["Loading Default","Icon Default"],shape:"circle",type:"primary",icon:(0,jsx_runtime.jsx)(bk_design_dist.Icon,{type:"download"}),loading:!0},render:args=>{const{type,content,shape,icon,loading}=args;return(0,jsx_runtime.jsxs)("div",{className:"buttonIconLoading",children:[(0,jsx_runtime.jsx)(Button,{type,shape,loading}),(0,jsx_runtime.jsx)(Button,{type,content:content[0],loading}),(0,jsx_runtime.jsx)(Button,{type,shape,icon}),(0,jsx_runtime.jsx)(Button,{type,content:content[1],icon})]})}},buttonStyle={name:"Type",args:{content:["Red Button","Green Button","Orange Button"],type:"primary"},render:args=>{const{type,content}=args;return(0,jsx_runtime.jsxs)("div",{className:"buttonType",children:[(0,jsx_runtime.jsx)(Button,{type,content:content[0],style:{color:"white",backgroundColor:"red"}}),(0,jsx_runtime.jsx)(Button,{type,content:content[1],style:{color:"white",backgroundColor:"green"}}),(0,jsx_runtime.jsx)(Button,{type,content:content[2],style:{color:"white",backgroundColor:"orange"}})]})}};buttonType.parameters={...buttonType.parameters,docs:{...buttonType.parameters?.docs,source:{originalSource:'{\n  name: "Type",\n  args: {\n    content: ["Primary Button", "Default Button", "Dashed Button"],\n    type: ["primary", "default", "dashed"]\n  },\n  render: args => {\n    const {\n      type,\n      content\n    } = args;\n    return <div className="buttonType">\r\n        {type.map((e, i) => <Button type={e} content={content[i]} />)}\r\n      </div>;\n  }\n}',...buttonType.parameters?.docs?.source}}},buttonSize.parameters={...buttonSize.parameters,docs:{...buttonSize.parameters?.docs,source:{originalSource:'{\n  name: "Size",\n  args: {\n    content: ["Small Button", "Medium Button", "Large Button"],\n    size: ["small", "medium", "large"]\n  },\n  render: args => {\n    const {\n      size,\n      content\n    } = args;\n    return <div className="buttonType">\r\n        {size.map((e, i) => <Button size={e} content={content[i]} type="primary" />)}\r\n      </div>;\n  }\n}',...buttonSize.parameters?.docs?.source}}},buttonShape.parameters={...buttonShape.parameters,docs:{...buttonShape.parameters?.docs,source:{originalSource:'{\n  name: "Shape",\n  args: {\n    content: ["B", "Default Button"],\n    shape: ["circle", "default"]\n  },\n  render: args => {\n    const {\n      shape,\n      content\n    } = args;\n    return <div className="buttonShape">\r\n        {shape.map((e, i) => <Button shape={e} content={content[i]} type="primary" />)}\r\n      </div>;\n  }\n}',...buttonShape.parameters?.docs?.source}}},buttonBlock.parameters={...buttonBlock.parameters,docs:{...buttonBlock.parameters?.docs,source:{originalSource:'{\n  name: "Block",\n  args: {\n    content: ["Primary Button Block", "Default Button Block", "Dashed Button Block"],\n    type: ["primary", "default", "dashed"],\n    block: true\n  },\n  render: args => {\n    const {\n      type,\n      content,\n      block\n    } = args;\n    return <div className="buttonBlock">\r\n        {type.map((e, i) => <Button type={e} content={content[i]} block={block} />)}\r\n      </div>;\n  }\n}',...buttonBlock.parameters?.docs?.source}}},buttonIconLoading.parameters={...buttonIconLoading.parameters,docs:{...buttonIconLoading.parameters?.docs,source:{originalSource:'{\n  name: "Loading & Icon",\n  args: {\n    content: ["Loading Default", "Icon Default"],\n    shape: "circle",\n    type: "primary",\n    icon: <Icon type="download" />,\n    loading: true\n  },\n  render: args => {\n    const {\n      type,\n      content,\n      shape,\n      icon,\n      loading\n    } = args;\n    return <div className="buttonIconLoading">\r\n        <Button type={type} shape={shape} loading={loading} />\r\n        <Button type={type} content={content[0]} loading={loading} />\r\n        <Button type={type} shape={shape} icon={icon} />\r\n        <Button type={type} content={content[1]} icon={icon} />\r\n      </div>;\n  }\n}',...buttonIconLoading.parameters?.docs?.source}}},buttonStyle.parameters={...buttonStyle.parameters,docs:{...buttonStyle.parameters?.docs,source:{originalSource:'{\n  name: "Type",\n  args: {\n    content: ["Red Button", "Green Button", "Orange Button"],\n    type: "primary"\n  },\n  render: args => {\n    const {\n      type,\n      content\n    } = args;\n    return <div className="buttonType">\r\n        <Button type={type} content={content[0]} style={{\n        color: "white",\n        backgroundColor: "red"\n      }} />\r\n        <Button type={type} content={content[1]} style={{\n        color: "white",\n        backgroundColor: "green"\n      }} />\r\n        <Button type={type} content={content[2]} style={{\n        color: "white",\n        backgroundColor: "orange"\n      }} />\r\n      </div>;\n  }\n}',...buttonStyle.parameters?.docs?.source}}};const __namedExportsOrder=["buttonType","buttonSize","buttonShape","buttonBlock","buttonIconLoading","buttonStyle"]},"./node_modules/@storybook/instrumenter/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/instrumenter/dist sync recursive",module.exports=webpackEmptyContext},"./node_modules/@storybook/test/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/test/dist sync recursive",module.exports=webpackEmptyContext}}]);